@typeparam TItem
@inject DragDropService dragDropService
@implements IDisposable
@implements IDragDropZone

<div class=@getClasses() @ondragover:preventDefault ondragend="@dragDropService.StopDrag" ondragover="@DragOverZone" ondragleave="@(() => {currentHoverIndex = -1;})">
    
    @if (ShowHeader)
    {
        <div class="dropZoneOnly">
            @if (ZoneHeader == null)
            {
                <h1>@Title</h1>
            }
            else
            {
                @ZoneHeader
            }
        </div>
    }

    @if (ShowItems)
    {
        int i = 0;
        if (emptyAndHovering)
        {
            <div class="dropOutline">
            </div>
        }

        while (i < Items.Count)
        {
            object item = Items[i];
            int index = i;
            <div ondragover="@(() => DragOverItem(index))">
                <div draggable="true" @ondragover:preventDefault ondragstart="@(() => dragDropService.StartDrag(this, item))">
                    @ItemRenderer((TItem)item)
                </div>

                @if (i == currentHoverIndex && CanReorder)
                {
                    <div class="dropOutline">
                    </div>
                }
            </div>

            i++;
        }
    }
</div>

@code {
    [Parameter]
    public required RenderFragment<TItem> ItemRenderer { get; set; }

    [Parameter]
    public RenderFragment? ZoneHeader { get; set; }

    [Parameter]
    public bool ShowItems { get; set; } = true;

    [Parameter]
    public string? Title { get; set; } = null;

    [Parameter]
    public string CanDropClass { get; set; } = "";

    [Parameter]
    public string NoDropClass { get; set; } = "";

    [Parameter]
    public string Class { get; set; } = "";

    [Parameter]
    public bool CanReorder { get; set; } = false;

    private bool ShowHeader => ZoneHeader != null || Title != null;

    private List<object> Items { get; set; } = new();

    private int currentHoverIndex = -1;

    private bool emptyAndHovering => Items.Count == 0 && dragDropService.CanDropHere(this);

    public override string ToString()
    {
        return Title;
    }

    protected override void OnInitialized()
    {
        dragDropService.AddZone(this);
        base.OnInitialized();
    }

    public void Dispose()
    {
        dragDropService.RemoveZone(this);
    }

    // TODO: CHECK for interfaces and other types?
    public bool CanDropItem(object item) => typeof(TItem).IsCompatibleType(item.GetType());

    public void DropItem(object item)
    {
        if (CanDropItem(item))
        {
            int insertIndex = currentHoverIndex == -1 ? Items.Count : currentHoverIndex + 1;
            Items.Insert(CanReorder ? insertIndex : Items.Count, item); //Only insert if reorder is enabled.
            StateHasChanged();
        }
    }

    public void RemoveItem(object item)
    {
        this.Items.Remove(item);
        StateHasChanged();
    }

    public void ReorderItem(object item)
    {
        int index = this.Items.IndexOf(item);
        this.Items.Remove(item);
        currentHoverIndex -= index <= currentHoverIndex ? 1 : 0;
        this.Items.Insert(Math.Min(currentHoverIndex+1, Items.Count), item);
        StateHasChanged();
    }

    private string getClasses()
    {
        List<string> classes = new() { "dropZone", Class };

        bool isCurrent = dragDropService.IsCurrent(this);
        bool isValid = dragDropService.CanDropHere(this);

        if (isCurrent && isValid)
        {
            classes.Add(CanDropClass);
        } 
        else if (isCurrent)
        {
            classes.Add(NoDropClass);
        }

        return String.Join(" ", classes.ToArray());
    }

    private void DragOverZone()
    {
        dragDropService.SetOver(this);
        if (emptyAndHovering)
        {
            StateHasChanged();
        }
    }

    private void DragOverItem(int index)
    {
        if (dragDropService.CanDropHere(this))
        {
            currentHoverIndex = index;
        }
        StateHasChanged();
    }

    public void UpdateCurrentZone(bool isCurrent)
    {
        if (!isCurrent)
        {
            currentHoverIndex = -1;
        }
        StateHasChanged();
    }

}
