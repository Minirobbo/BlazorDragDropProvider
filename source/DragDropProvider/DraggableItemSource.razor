@using Microsoft.Extensions.DependencyInjection
@inject IServiceProvider ServiceProvider
@typeparam TItem where TItem : class
@implements IDragDropSource<TItem>

@foreach (TItem item in Items)
{
    <div class="@(DragDropService == null ? "mud-error" : "")" draggable="true" @ondragover:preventDefault ondragstart="@(() => DragDropService.StartDrag(this, item))" ondragend="@DragDropService.StopDrag">
        @ItemRenderer((TItem)item)
    </div>
}

@code {
    [Parameter]
    public required RenderFragment<TItem> ItemRenderer { get; set; }

    [Parameter]
    public required List<TItem> Items { get; set; }

    [Parameter]
    public bool RenewableItems { get; set; } = false;

    [Parameter]
    public string? Title { get; set; } = null;

    [CascadingParameter]
    private DragDropService<TItem> DragDropService { get; set; }

    public void RemoveItem(TItem item)
    {
        if (!RenewableItems)
        {
            Items.Remove(item);
        }
        StateHasChanged();
    }
}